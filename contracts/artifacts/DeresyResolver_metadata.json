{
	"compiler": {
		"version": "0.8.19+commit.7dd6d404"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract IEAS",
						"name": "eas",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "AccessDenied",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InsufficientValue",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidEAS",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidLength",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotPayable",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "_requestName",
						"type": "string"
					}
				],
				"name": "ClosedReviewRequest",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "_formName",
						"type": "string"
					}
				],
				"name": "CreatedReviewForm",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "_requestName",
						"type": "string"
					}
				],
				"name": "CreatedReviewRequest",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "schema",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "time",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "expirationTime",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "revocationTime",
								"type": "uint64"
							},
							{
								"internalType": "bytes32",
								"name": "refUID",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "attester",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "revocable",
								"type": "bool"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"indexed": false,
						"internalType": "struct Attestation",
						"name": "_attestation",
						"type": "tuple"
					},
					{
						"indexed": false,
						"internalType": "string",
						"name": "_requestName",
						"type": "string"
					}
				],
				"name": "OnReviewCallback",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "bytes32",
						"name": "_uid",
						"type": "bytes32"
					}
				],
				"name": "SubmittedAmendment",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "string",
						"name": "_requestName",
						"type": "string"
					}
				],
				"name": "SubmittedReview",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "amendmentsSchemaID",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "schema",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "time",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "expirationTime",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "revocationTime",
								"type": "uint64"
							},
							{
								"internalType": "bytes32",
								"name": "refUID",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "attester",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "revocable",
								"type": "bool"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct Attestation",
						"name": "attestation",
						"type": "tuple"
					}
				],
				"name": "attest",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "callbackContract",
				"outputs": [
					{
						"internalType": "contract IOnReviewable",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					}
				],
				"name": "closeReviewRequest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "contractVersion",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					},
					{
						"internalType": "address[]",
						"name": "reviewers",
						"type": "address[]"
					},
					{
						"internalType": "address[]",
						"name": "reviewerContracts",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "hypercertIDs",
						"type": "uint256[]"
					},
					{
						"internalType": "string[]",
						"name": "hypercertIPFSHashes",
						"type": "string[]"
					},
					{
						"internalType": "string",
						"name": "formIpfsHash",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "reviewFormName",
						"type": "string"
					}
				],
				"name": "createNonPayableRequest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					},
					{
						"internalType": "address[]",
						"name": "reviewers",
						"type": "address[]"
					},
					{
						"internalType": "address[]",
						"name": "reviewerContracts",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "hypercertIDs",
						"type": "uint256[]"
					},
					{
						"internalType": "string[]",
						"name": "hypercertIPFSHashes",
						"type": "string[]"
					},
					{
						"internalType": "string",
						"name": "formIpfsHash",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "rewardPerReview",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "reviewsPerHypercert",
						"type": "uint8"
					},
					{
						"internalType": "address",
						"name": "paymentTokenAddress",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "reviewFormName",
						"type": "string"
					}
				],
				"name": "createRequest",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					},
					{
						"internalType": "string[]",
						"name": "questions",
						"type": "string[]"
					},
					{
						"internalType": "string[][]",
						"name": "choices",
						"type": "string[][]"
					},
					{
						"internalType": "enum DeresyResolver.QuestionType[]",
						"name": "questionTypes",
						"type": "uint8[]"
					}
				],
				"name": "createReviewForm",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					}
				],
				"name": "getRequest",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "sponsor",
								"type": "address"
							},
							{
								"internalType": "address[]",
								"name": "reviewers",
								"type": "address[]"
							},
							{
								"internalType": "address[]",
								"name": "reviewerContracts",
								"type": "address[]"
							},
							{
								"internalType": "uint256[]",
								"name": "hypercertIDs",
								"type": "uint256[]"
							},
							{
								"internalType": "string[]",
								"name": "hypercertIPFSHashes",
								"type": "string[]"
							},
							{
								"internalType": "string",
								"name": "formIpfsHash",
								"type": "string"
							},
							{
								"internalType": "uint256",
								"name": "rewardPerReview",
								"type": "uint256"
							},
							{
								"internalType": "uint8",
								"name": "reviewsPerHypercert",
								"type": "uint8"
							},
							{
								"components": [
									{
										"internalType": "address",
										"name": "reviewer",
										"type": "address"
									},
									{
										"internalType": "uint256",
										"name": "hypercertID",
										"type": "uint256"
									},
									{
										"internalType": "bytes32",
										"name": "attestationID",
										"type": "bytes32"
									},
									{
										"internalType": "bytes32[]",
										"name": "amendmentsUIDs",
										"type": "bytes32[]"
									}
								],
								"internalType": "struct DeresyResolver.Review[]",
								"name": "reviews",
								"type": "tuple[]"
							},
							{
								"internalType": "bool",
								"name": "isClosed",
								"type": "bool"
							},
							{
								"internalType": "address",
								"name": "paymentTokenAddress",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "fundsLeft",
								"type": "uint256"
							},
							{
								"internalType": "string",
								"name": "reviewFormName",
								"type": "string"
							},
							{
								"internalType": "string",
								"name": "name",
								"type": "string"
							}
						],
						"internalType": "struct DeresyResolver.ReviewRequest",
						"name": "reviewRequest",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					}
				],
				"name": "getRequestReviewForm",
				"outputs": [
					{
						"components": [
							{
								"internalType": "string[]",
								"name": "questions",
								"type": "string[]"
							},
							{
								"internalType": "enum DeresyResolver.QuestionType[]",
								"name": "questionTypes",
								"type": "uint8[]"
							},
							{
								"internalType": "string[][]",
								"name": "choices",
								"type": "string[][]"
							}
						],
						"internalType": "struct DeresyResolver.ReviewForm",
						"name": "requestReviewForm",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_reviewFormName",
						"type": "string"
					}
				],
				"name": "getReviewForm",
				"outputs": [
					{
						"components": [
							{
								"internalType": "string[]",
								"name": "questions",
								"type": "string[]"
							},
							{
								"internalType": "enum DeresyResolver.QuestionType[]",
								"name": "questionTypes",
								"type": "uint8[]"
							},
							{
								"internalType": "string[][]",
								"name": "choices",
								"type": "string[][]"
							}
						],
						"internalType": "struct DeresyResolver.ReviewForm",
						"name": "reviewForm",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getReviewFormsNames",
				"outputs": [
					{
						"internalType": "string[]",
						"name": "",
						"type": "string[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getReviewRequestsNames",
				"outputs": [
					{
						"internalType": "string[]",
						"name": "",
						"type": "string[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getWhitelistedTokens",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "hypercertContract",
				"outputs": [
					{
						"internalType": "contract IHypercertable",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isPayable",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "reviewerAddress",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					}
				],
				"name": "isReviewer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					}
				],
				"name": "isTokenWhitelisted",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "schema",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "time",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "expirationTime",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "revocationTime",
								"type": "uint64"
							},
							{
								"internalType": "bytes32",
								"name": "refUID",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "attester",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "revocable",
								"type": "bool"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct Attestation[]",
						"name": "attestations",
						"type": "tuple[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					}
				],
				"name": "multiAttest",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "schema",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "time",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "expirationTime",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "revocationTime",
								"type": "uint64"
							},
							{
								"internalType": "bytes32",
								"name": "refUID",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "attester",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "revocable",
								"type": "bool"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct Attestation[]",
						"name": "attestations",
						"type": "tuple[]"
					},
					{
						"internalType": "uint256[]",
						"name": "values",
						"type": "uint256[]"
					}
				],
				"name": "multiRevoke",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "reviewsSchemaID",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "uid",
								"type": "bytes32"
							},
							{
								"internalType": "bytes32",
								"name": "schema",
								"type": "bytes32"
							},
							{
								"internalType": "uint64",
								"name": "time",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "expirationTime",
								"type": "uint64"
							},
							{
								"internalType": "uint64",
								"name": "revocationTime",
								"type": "uint64"
							},
							{
								"internalType": "bytes32",
								"name": "refUID",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "recipient",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "attester",
								"type": "address"
							},
							{
								"internalType": "bool",
								"name": "revocable",
								"type": "bool"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct Attestation",
						"name": "attestation",
						"type": "tuple"
					}
				],
				"name": "revoke",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_amendmentsSchemaID",
						"type": "bytes32"
					}
				],
				"name": "setAmendmentsSchemaID",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_callbackContractAddress",
						"type": "address"
					}
				],
				"name": "setCallbackContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_hypercertContractAddress",
						"type": "address"
					}
				],
				"name": "setHypercertContract",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_reviewsSchemaID",
						"type": "bytes32"
					}
				],
				"name": "setReviewsSchemaID",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "_validateHypercertIDs",
						"type": "bool"
					}
				],
				"name": "setValidateHypercertIDs",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unpause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					}
				],
				"name": "unwhitelistToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "validateHypercertIDs",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "version",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenAddress",
						"type": "address"
					}
				],
				"name": "whitelistToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
					"params": {
						"attestation": "The new attestation."
					},
					"returns": {
						"_0": "Whether the attestation is valid."
					}
				},
				"closeReviewRequest(string)": {
					"custom:requires": "msg.sender must be the sponsor of the review requestThe review request must not already be closed",
					"details": "Transfers remaining funds back to the sponsor and marks the request as closed",
					"params": {
						"_name": "The name of the review request to close"
					}
				},
				"createNonPayableRequest(string,address[],address[],uint256[],string[],string,string)": {
					"custom:requires": "The contract should not be paused",
					"details": "This function creates a review request without allocating any funds",
					"params": {
						"_name": "The name of the review request",
						"formIpfsHash": "IPFS hash of the review form",
						"hypercertIDs": "Array of hypercert IDs associated with the review",
						"hypercertIPFSHashes": "Array of IPFS hashes for the hypercerts",
						"reviewFormName": "Name of the review form",
						"reviewers": "Array of addresses of the reviewers"
					}
				},
				"createRequest(string,address[],address[],uint256[],string[],string,uint256,uint8,address,string)": {
					"custom:requires": "The contract should not be paused",
					"details": "This function creates a review request and allocates funds for it",
					"params": {
						"_name": "The name of the review request",
						"formIpfsHash": "IPFS hash of the review form",
						"hypercertIDs": "Array of hypercert IDs associated with the review",
						"hypercertIPFSHashes": "Array of IPFS hashes for the hypercerts",
						"paymentTokenAddress": "Address of the payment token",
						"reviewFormName": "Name of the review form",
						"reviewers": "Array of addresses of the reviewers",
						"rewardPerReview": "Amount of reward per review"
					}
				},
				"createReviewForm(string,string[],string[][],uint8[])": {
					"custom:requires": "Name must not be null or emptyReview form name must be uniqueQuestions array cannot be emptyQuestionTypes array cannot be emptyQuestions and types must have the same lengthQuestions and choices must have the same length",
					"details": "Only callable when the contract is not paused",
					"params": {
						"_name": "The name of the review form",
						"choices": "Array of choices for each question",
						"questionTypes": "Array of types for each question",
						"questions": "Array of questions for the review form"
					}
				},
				"getRequest(string)": {
					"params": {
						"_name": "The name of the review request"
					},
					"returns": {
						"reviewRequest": "Returns the review request struct"
					}
				},
				"getRequestReviewForm(string)": {
					"params": {
						"_name": "The name of the review request"
					},
					"returns": {
						"requestReviewForm": "Returns the review form struct"
					}
				},
				"getReviewForm(string)": {
					"params": {
						"_reviewFormName": "The name of the review form"
					},
					"returns": {
						"reviewForm": "Returns the review form struct"
					}
				},
				"getReviewFormsNames()": {
					"returns": {
						"_0": "An array of review form names"
					}
				},
				"getReviewRequestsNames()": {
					"returns": {
						"_0": "An array of review request names"
					}
				},
				"getWhitelistedTokens()": {
					"returns": {
						"_0": "An array of addresses of the whitelisted tokens"
					}
				},
				"isPayable()": {
					"returns": {
						"_0": "Whether the resolver supports ETH transfers."
					}
				},
				"isReviewer(address,string)": {
					"custom:visibility": "external",
					"params": {
						"_name": "The name of the review request",
						"reviewerAddress": "The address to check"
					},
					"returns": {
						"_0": "reviewerFound Returns true if the address is a reviewer, false otherwise"
					}
				},
				"isTokenWhitelisted(address)": {
					"params": {
						"tokenAddress": "The address of the token to check"
					},
					"returns": {
						"_0": "Returns true if the token is whitelisted, false otherwise"
					}
				},
				"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
					"params": {
						"attestations": "The new attestations.",
						"values": "Explicit ETH amounts which were sent with each attestation."
					},
					"returns": {
						"_0": "Whether all the attestations are valid."
					}
				},
				"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
					"params": {
						"attestations": "The existing attestations to be revoked.",
						"values": "Explicit ETH amounts which were sent with each revocation."
					},
					"returns": {
						"_0": "Whether the attestations can be revoked."
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"pause()": {
					"details": "Only callable by the contract owner and when the contract is not paused"
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
					"params": {
						"attestation": "The existing attestation to be revoked."
					},
					"returns": {
						"_0": "Whether the attestation can be revoked."
					}
				},
				"setAmendmentsSchemaID(bytes32)": {
					"custom:requires": "Only callable by the owner",
					"params": {
						"_amendmentsSchemaID": "The new schema ID"
					}
				},
				"setCallbackContract(address)": {
					"custom:requires": "Only callable by the ownerContract should not be paused",
					"params": {
						"_callbackContractAddress": "The address of the callback contract"
					}
				},
				"setHypercertContract(address)": {
					"custom:requires": "Only callable by the owner",
					"params": {
						"_hypercertContractAddress": "The address of the hypercert contract"
					}
				},
				"setReviewsSchemaID(bytes32)": {
					"custom:requires": "Only callable by the owner",
					"params": {
						"_reviewsSchemaID": "The new schema ID"
					}
				},
				"setValidateHypercertIDs(bool)": {
					"custom:requires": "Only callable by the owner",
					"params": {
						"_validateHypercertIDs": "Boolean flag to enable or disable validation"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"unpause()": {
					"details": "Only callable by the contract owner"
				},
				"unwhitelistToken(address)": {
					"custom:requires": "Token must be in the whitelist",
					"details": "Only callable by the contract owner",
					"params": {
						"tokenAddress": "The address of the token to be removed from the whitelist"
					}
				},
				"version()": {
					"returns": {
						"_0": "Semver contract version as a string."
					}
				},
				"whitelistToken(address)": {
					"custom:requires": "Token must not already be whitelisted",
					"details": "Only callable by the contract owner",
					"params": {
						"tokenAddress": "The address of the token to be whitelisted"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"attest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
					"notice": "Processes an attestation and verifies whether it's valid."
				},
				"closeReviewRequest(string)": {
					"notice": "Closes an existing review request"
				},
				"createNonPayableRequest(string,address[],address[],uint256[],string[],string,string)": {
					"notice": "Creates a new non-payable review request"
				},
				"createRequest(string,address[],address[],uint256[],string[],string,uint256,uint8,address,string)": {
					"notice": "Creates a new payable review request"
				},
				"createReviewForm(string,string[],string[][],uint8[])": {
					"notice": "Creates a new review form"
				},
				"getRequest(string)": {
					"notice": "Retrieves details of a specific review request"
				},
				"getRequestReviewForm(string)": {
					"notice": "Retrieves the review form associated with a specific review request"
				},
				"getReviewForm(string)": {
					"notice": "Retrieves a specific review form by name"
				},
				"getReviewFormsNames()": {
					"notice": "Retrieves the names of all review forms"
				},
				"getReviewRequestsNames()": {
					"notice": "Retrieves the names of all review requests"
				},
				"getWhitelistedTokens()": {
					"notice": "Retrieves all whitelisted tokens"
				},
				"isPayable()": {
					"notice": "Checks if the resolver can be sent ETH."
				},
				"isReviewer(address,string)": {
					"notice": "Checks if an address is a reviewer for a specific review request"
				},
				"isTokenWhitelisted(address)": {
					"notice": "Checks if a token is whitelisted"
				},
				"multiAttest((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
					"notice": "Processes multiple attestations and verifies whether they are valid."
				},
				"multiRevoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes)[],uint256[])": {
					"notice": "Processes revocation of multiple attestation and verifies they can be revoked."
				},
				"pause()": {
					"notice": "Pauses the contract"
				},
				"revoke((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
					"notice": "Processes an attestation revocation and verifies if it can be revoked."
				},
				"setAmendmentsSchemaID(bytes32)": {
					"notice": "Sets the schema ID for amendments"
				},
				"setCallbackContract(address)": {
					"notice": "Sets the callback contract address"
				},
				"setHypercertContract(address)": {
					"notice": "Sets the hypercert contract address"
				},
				"setReviewsSchemaID(bytes32)": {
					"notice": "Sets the schema ID for reviews"
				},
				"setValidateHypercertIDs(bool)": {
					"notice": "Enables or disables hypercert ID validation"
				},
				"unpause()": {
					"notice": "Unpauses the contract"
				},
				"unwhitelistToken(address)": {
					"notice": "Removes a token from the whitelist"
				},
				"version()": {
					"notice": "Returns the full semver contract version."
				},
				"whitelistToken(address)": {
					"notice": "Adds a token to the whitelist"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/DeresyResolver.sol": "DeresyResolver"
		},
		"evmVersion": "paris",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@ethereum-attestation-service/eas-contracts/contracts/Common.sol": {
			"keccak256": "0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685",
			"license": "MIT",
			"urls": [
				"bzz-raw://da1dc9aedbb1d4d39c46c2235918d3adfbc5741dd34a46010cf425d134e7936d",
				"dweb:/ipfs/QmWUk6bXnLaghS2riF3GTFEeURCzgYFMA5woa6AsgPwEgc"
			]
		},
		"@ethereum-attestation-service/eas-contracts/contracts/IEAS.sol": {
			"keccak256": "0xd5a192f0bcee5372b69b0bb746c26317a2691dd10bfa52adbd08a9b723a55036",
			"license": "MIT",
			"urls": [
				"bzz-raw://ca836dd01016e7198a0b8e9e79d78512eb9db86dde6afd47f727f18d9a9c33a1",
				"dweb:/ipfs/QmXLTzcLUvA52qpVRUtVvj6L73cTmHk62jGsf6JErXFxD4"
			]
		},
		"@ethereum-attestation-service/eas-contracts/contracts/ISchemaRegistry.sol": {
			"keccak256": "0x772b1ebcf3e5c93fecb53762e11bbdae75fcb667deea4ac21134fccfe78326e4",
			"license": "MIT",
			"urls": [
				"bzz-raw://734ea6ab1e3bea7d8e0d478731c3b8888347ec01601d66d3072398b8984e8517",
				"dweb:/ipfs/QmQHZM7USiV88SUucWV7wwCpURv98dDngtFcsEaEnFwdtp"
			]
		},
		"@ethereum-attestation-service/eas-contracts/contracts/Semver.sol": {
			"keccak256": "0x5883c852730b00d73b10475f3b382afce8f30b89f337078ec03a66c463e048a8",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ab7f1cf03a19860d07100bd61a8138346c5682bced5dbc569847d35241ba1fd",
				"dweb:/ipfs/QmfTTnWbarxDZuUCCextgxrTcATy1N1XoPBmFYj2nQZJUG"
			]
		},
		"@ethereum-attestation-service/eas-contracts/contracts/resolver/ISchemaResolver.sol": {
			"keccak256": "0xb74b64e20b90b35004750d2c78ceb114a304975d22d71bd9a2a9de0d483f0395",
			"license": "MIT",
			"urls": [
				"bzz-raw://0d0a30499e28e7c4ed62f2d8a88c46623c96830cc23e04ce6e9cd0cd0b11a03d",
				"dweb:/ipfs/QmYWNWu1cn7XDSaFgiMyn2L2coud3DNiGoNrNNo8QYcdyC"
			]
		},
		"@ethereum-attestation-service/eas-contracts/contracts/resolver/SchemaResolver.sol": {
			"keccak256": "0x0c0533594956d3a7d861a68127825cbde3bc9a89979ece3aa99c3820f4c5a251",
			"license": "MIT",
			"urls": [
				"bzz-raw://487e5c67f3d347f6f99b0857155aebbb015f63666ab46c57dffc72a7c6f5c06f",
				"dweb:/ipfs/QmeTmXPtumpWVxGY2NXQG3Fma73vh3Bjb6diuUHK52mpPD"
			]
		},
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218",
			"license": "MIT",
			"urls": [
				"bzz-raw://fc980984badf3984b6303b377711220e067722bbd6a135b24669ff5069ef9f32",
				"dweb:/ipfs/QmPHXMSXj99XjSVM21YsY6aNtLLjLVXDbyN76J5HQYvvrz"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
			"license": "MIT",
			"urls": [
				"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
				"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266",
			"license": "MIT",
			"urls": [
				"bzz-raw://7e66dfde185df46104c11bc89d08fa0760737aa59a2b8546a656473d810a8ea4",
				"dweb:/ipfs/QmXvyqtXPaPss2PD7eqPoSao5Szm2n6UMoiG8TZZDjmChR"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0",
			"license": "MIT",
			"urls": [
				"bzz-raw://b81d9ff6559ea5c47fc573e17ece6d9ba5d6839e213e6ebc3b4c5c8fe4199d7f",
				"dweb:/ipfs/QmPCW1bFisUzJkyjroY3yipwfism9RRCigCcK1hbXtVM8n"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1",
			"license": "MIT",
			"urls": [
				"bzz-raw://be161e54f24e5c6fae81a12db1a8ae87bc5ae1b0ddc805d82a1440a68455088f",
				"dweb:/ipfs/QmP7C3CHdY9urF4dEMb9wmsp1wMxHF6nhA2yQE5SKiPAdy"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3",
			"license": "MIT",
			"urls": [
				"bzz-raw://cc8841b3cd48ad125e2f46323c8bad3aa0e88e399ec62acb9e57efa7e7c8058c",
				"dweb:/ipfs/QmSqE4mXHA2BXW58deDbXE8MTcsL5JSKNDbm23sVQxRLPS"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc",
			"license": "MIT",
			"urls": [
				"bzz-raw://c50fcc459e49a9858b6d8ad5f911295cb7c9ab57567845a250bf0153f84a95c7",
				"dweb:/ipfs/QmcEW85JRzvDkQggxiBBLVAasXWdkhEysqypj9EaB6H2g6"
			]
		},
		"contracts/DeresyResolver.sol": {
			"keccak256": "0x21fc81c6757e39e93566c003c19edf99dbe5446acc8eafeff217e8d74d74f899",
			"license": "AGPL-3.0-only",
			"urls": [
				"bzz-raw://5dfe02871284a701c63fb471b7c31f5e713e678c72dd02ac7280d365815ff516",
				"dweb:/ipfs/QmX81PbggVZMBNcDBpa1XTQMHfVhbs6JAgK1uhesAyVF6X"
			]
		},
		"contracts/interfaces/IHypercertable.sol": {
			"keccak256": "0x37b59a74f7dc412d7730e338405112dc3d97016f8de968472a6703351c6a5a12",
			"license": "MIT",
			"urls": [
				"bzz-raw://9e724fda253fcd1d7d0fa58160b4097520c0298fd505af5d3ac248e809ddde83",
				"dweb:/ipfs/QmQR1XqDcSH3ZJauw8PmnqASra1QKZa7VVMbRRjng1GCS9"
			]
		},
		"contracts/interfaces/IOnReviewable.sol": {
			"keccak256": "0x75085f6195410d68cee8107603702b28072729a338a130726ef6493c46b7af0b",
			"license": "MIT",
			"urls": [
				"bzz-raw://76a8abd9703ca4a1cd2ae702863172761eed91ced6590e56be7b6322103088a8",
				"dweb:/ipfs/QmVr96CBhaRWgLkuWe4awkK599GK1bR9upVgUzSnfEZGEJ"
			]
		}
	},
	"version": 1
}